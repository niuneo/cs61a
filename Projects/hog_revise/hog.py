"""CS 61A Presents The Game of Hog."""

from dice import six_sided, four_sided, make_test_dice
from ucb import main, trace, interact

GOAL_SCORE = 100  # The goal of Hog is to score 100 points.

######################
# Phase 1: Simulator #
######################


def roll_dice(num_rolls, dice=six_sided):
    """Simulate rolling the DICE exactly NUM_ROLLS > 0 times. Return the sum of
    the outcomes unless any of the outcomes is 1. In that case, return 1.

    num_rolls:  The number of dice rolls that will be made.
    dice:       A function that simulates a single dice roll outcome.
    """
    # These assert statements ensure that num_rolls is a positive integer.
    assert type(num_rolls) == int, 'num_rolls must be an integer.'
    assert num_rolls > 0, 'Must roll at least once.'
    # BEGIN PROBLEM 1
    results = tuple(dice() for _ in range(num_rolls))  # tuple generation is more memory-friendly
    return 1 if 1 in xs else results(xs)
    # END PROBLEM 1


def free_bacon(score):
    """Return the points scored from rolling 0 dice (Free Bacon).

    score:  The opponent's current score.
    """
    assert score < 100, 'The game should be over.'
    # BEGIN PROBLEM 2
    return 10 - min(score // 10, score % 10)
    # END PROBLEM 2


def take_turn(num_rolls, opponent_score, dice=six_sided):
    """Simulate a turn rolling NUM_ROLLS dice, which may be 0 (Free Bacon).
    Return the points scored for the turn by the current player.

    num_rolls:       The number of dice rolls that will be made.
    opponent_score:  The total score of the opponent.
    dice:            A function that simulates a single dice roll outcome.
    """
    # Leave these assert statements here; they help check for errors.
    assert type(num_rolls) == int, 'num_rolls must be an integer.'
    assert num_rolls >= 0, 'Cannot roll a negative number of dice in take_turn.'
    assert num_rolls <= 10, 'Cannot roll more than 10 dice.'
    assert opponent_score < 100, 'The game should be over.'
    # BEGIN PROBLEM 3
    return free_bacon(opponent_score) if num_rolls == 0 else roll_dice(num_rolls, dice)
    # END PROBLEM 3


def is_swap(player_score, opponent_score):
    """
    Return whether the two scores should be swapped
    """
    # BEGIN PROBLEM 4
    from math import log10
    player_leftmost = player_score // 10 ** int(log10(player_score))
    opponent_rightmost = opponent_score % 10
    return player_leftmost == opponent_rightmost
    # END PROBLEM 4


def other(player):
    """Return the other player, for a player PLAYER numbered 0 or 1.

    >>> other(0)
    1
    >>> other(1)
    0
    """
    return 1 - player


def silence(score0, score1):
    """Announce nothing (see Phase 2)."""
    return silence


def play(strategy0, strategy1, score0=0, score1=0, dice=six_sided,
         goal=GOAL_SCORE, say=silence):
    """Simulate a game and return the final scores of both players, with Player
    0's score first, and Player 1's score second.

    A strategy is a function that takes two total scores as arguments (the
    current player's score, and the opponent's score), and returns a number of
    dice that the current player will roll this turn.

    strategy0:  The strategy function for Player 0, who plays first.
    strategy1:  The strategy function for Player 1, who plays second.
    score0:     Starting score for Player 0
    score1:     Starting score for Player 1
    dice:       A function of zero arguments that simulates a dice roll.
    goal:       The game ends and someone wins when this score is reached.
    say:        The commentary function to call at the end of the first turn.
    """
    player = 0  # Which player is about to take a turn, 0 (first) or 1 (second)
    # BEGIN PROBLEM 5
    while max(score0, score1) < goal:
        if player == 0:
            score0 += take_turn(strategy0(score0, score1), score1, dice)
            if is_swap(score0, score1):
                score0, score1 = score1, score0
        else:  # player == 1
            score1 += take_turn(strategy1(score1, score0), score0, dice)
            if is_swap(score1, score0):
                score0, score1 = score1, score0
        player = other(player)
    # END PROBLEM 5
    # (note that the indentation for the problem 6 prompt (***YOUR CODE HERE***) might be misleading)
    # BEGIN PROBLEM 6
        say = say(score0, score1)
    # END PROBLEM 6
    return score0, score1


#######################
# Phase 2: Commentary #
#######################


def say_scores(score0, score1):
    """A commentary function that announces the score for each player."""
    print("Player 0 now has", score0, "and Player 1 now has", score1)
    return say_scores

def announce_lead_changes(previous_leader=None):
    """Return a commentary function that announces lead changes.

    >>> f0 = announce_lead_changes()
    >>> f1 = f0(5, 0)
    Player 0 takes the lead by 5
    >>> f2 = f1(5, 12)
    Player 1 takes the lead by 7
    >>> f3 = f2(8, 12)
    >>> f4 = f3(8, 13)
    >>> f5 = f4(15, 13)
    Player 0 takes the lead by 2
    """
    def say(score0, score1):
        if score0 > score1:
            leader = 0
        elif score1 > score0:
            leader = 1
        else:
            leader = None
        if leader != None and leader != previous_leader:
            print('Player', leader, 'takes the lead by', abs(score0 - score1))
        return announce_lead_changes(leader)
    return say

def both(f, g):
    """Return a commentary function that says what f says, then what g says.

    NOTE: the following game is not possible under the rules, it's just
    an example for the sake of the doctest

    >>> h0 = both(say_scores, announce_lead_changes())
    >>> h1 = h0(10, 0)
    Player 0 now has 10 and Player 1 now has 0
    Player 0 takes the lead by 10
    >>> h2 = h1(10, 6)
    Player 0 now has 10 and Player 1 now has 6
    >>> h3 = h2(6, 17)
    Player 0 now has 6 and Player 1 now has 17
    Player 1 takes the lead by 11
    """
    def say(score0, score1):
        return both(f(score0, score1), g(score0, score1))
    return say


def announce_highest(who, previous_high=0, previous_score=0):
    """Return a commentary function that announces when WHO's score
    increases by more than ever before in the game.

    NOTE: the following game is not possible under the rules, it's just
    an example for the sake of the doctest

    >>> f0 = announce_highest(1) # Only announce Player 1 score gains
    >>> f1 = f0(12, 0)
    >>> f2 = f1(12, 11)
    11 point(s)! That's the biggest gain yet for Player 1
    >>> f3 = f2(20, 11)
    >>> f4 = f3(13, 20)
    >>> f5 = f4(20, 35)
    15 point(s)! That's the biggest gain yet for Player 1
    >>> f6 = f5(20, 47) # Player 1 gets 12 points; not enough for a new high
    >>> f7 = f6(21, 47)
    >>> f8 = f7(21, 77)
    30 point(s)! That's the biggest gain yet for Player 1
    >>> f9 = f8(77, 22) # Swap!
    >>> f10 = f9(33, 77) # Swap!
    55 point(s)! That's the biggest gain yet for Player 1
    """
    assert who == 0 or who == 1, 'The who argument should indicate a player.'
    # BEGIN PROBLEM 7
    def inner(score0, score1):
        if who == 0:
            score = score0
        else:  # who == 1
            score = score1

        gain = score - previous_score

        if gain > previous_high:
            print(f"{gain} point(s)! That's the biggest gain yet for Player {who}")
            return announce_highest(who, gain, score)
        else:
            return announce_highest(who, previous_high, score)
    return inner
    # END PROBLEM 7


#######################
# Phase 3: Strategies #
#######################


def always_roll(n):
    """Return a strategy that always rolls N dice.

    A strategy is a function that takes two total scores as arguments (the
    current player's score, and the opponent's score), and returns a number of
    dice that the current player will roll this turn.

    >>> strategy = always_roll(5)
    >>> strategy(0, 0)
    5
    >>> strategy(99, 99)
    5
    """
    def strategy(score, opponent_score):
        return n
    return strategy


def make_averaged(fn, num_samples=1000):
    """Return a function that returns the average value of FN when called.

    To implement this function, you will have to use *args syntax, a new Python
    feature introduced in this project.  See the project description.

    >>> dice = make_test_dice(4, 2, 5, 1)
    >>> averaged_dice = make_averaged(dice, 1000)
    >>> averaged_dice()
    3.0
    """
    # BEGIN PROBLEM 8
    return lambda *args: sum([fn(*args) for _ in range(num_samples)]) / num_samples
    # END PROBLEM 8


def max_scoring_num_rolls(dice=six_sided, num_samples=1000):
    """Return the number of dice (1 to 10) that gives the highest average turn
    score by calling roll_dice with the provided DICE over NUM_SAMPLES times.
    Assume that the dice always return positive outcomes.

    >>> dice = make_test_dice(1, 6)
    >>> max_scoring_num_rolls(dice)
    1
    """
    # BEGIN PROBLEM 9
    averaged_roll_dice = make_averaged(roll_dice, num_samples)
    res = [averaged_roll_dice(i, dice) for i in range(1, 10 + 1)]
    return res.index(max(res)) + 1
    # END PROBLEM 9


def winner(strategy0, strategy1):
    """Return 0 if strategy0 wins against strategy1, and 1 otherwise."""
    score0, score1 = play(strategy0, strategy1)
    if score0 > score1:
        return 0
    else:
        return 1


def average_win_rate(strategy, baseline=always_roll(4)):
    """Return the average win rate of STRATEGY against BASELINE. Averages the
    winrate when starting the game as player 0 and as player 1.
    """
    win_rate_as_player_0 = 1 - make_averaged(winner)(strategy, baseline)
    win_rate_as_player_1 = make_averaged(winner)(baseline, strategy)

    return (win_rate_as_player_0 + win_rate_as_player_1) / 2


def run_experiments():
    """Run a series of strategy experiments and report results."""
    if True:  # Change to False when done finding max_scoring_num_rolls
        six_sided_max = max_scoring_num_rolls(six_sided)
        print('Max scoring num rolls for six-sided dice:', six_sided_max)

    if False:  # Change to True to test always_roll(8)
        print('always_roll(6) win rate:', average_win_rate(always_roll(6)))

    if False:  # Change to True to test bacon_strategy
        print('bacon_strategy win rate:', average_win_rate(bacon_strategy))

    if False:  # Change to True to test swap_strategy
        print('swap_strategy win rate:', average_win_rate(swap_strategy))

    if False:  # Change to True to test final_strategy
        print('final_strategy win rate:', average_win_rate(final_strategy))

    "*** You may add additional experiments as you wish ***"


def bacon_strategy(score, opponent_score, margin=8, num_rolls=4):
    """This strategy rolls 0 dice if that gives at least MARGIN points, and
    rolls NUM_ROLLS otherwise.
    """
    # BEGIN PROBLEM 10
    return 0 if free_bacon(opponent_score) >= margin else num_rolls
    # END PROBLEM 10


def swap_strategy(score, opponent_score, margin=8, num_rolls=4):
    """This strategy rolls 0 dice when it triggers a beneficial swap. It also
    rolls 0 dice if it gives at least MARGIN points and does not trigger a
    non-beneficial swap. Otherwise, it rolls NUM_ROLLS.
    """
    # BEGIN PROBLEM 11
    free_bacon_gain = free_bacon(opponent_score)
    free_bacon_new_score = score + free_bacon_gain
    is_beneficial_swap = is_swap(free_bacon_new_score, opponent_score) and opponent_score > free_bacon_new_score
    is_non_beneficial_swap = is_swap(free_bacon_new_score, opponent_score) and opponent_score <= free_bacon_new_score
    return 0 if is_beneficial_swap or (free_bacon_gain >= margin and not is_non_beneficial_swap) else num_rolls
    # END PROBLEM 11


def final_strategy(score, opponent_score):
    """Write a brief description of your final strategy.

    An optimized strategy that uses swap strategy by default.
    """
    # BEGIN PROBLEM 12
    return [[10,10,4,6,8,10,6,8,8,9,9,10,10,6,8,10,10,9,9,0,10,10,10,10,8,10,10,10,0,10,10,10,6,10,1,1,1,0,10,1,1,10,1,1,1,1,0,1,1,1,1,10,1,1,1,0,0,0,0,0,1,10,1,1,0,0,1,1,1,2,1,10,6,0,1,0,1,1,2,2,1,4,0,9,1,0,1,2,2,2,2,10,6,9,10,0,10,10,10,0],[10,10,4,6,7,9,6,8,6,9,9,10,10,6,8,9,10,8,9,10,10,10,10,10,8,10,10,10,9,0,10,10,10,10,9,10,10,1,0,10,10,3,10,9,10,1,1,0,10,1,10,3,10,8,1,1,0,1,1,0,10,3,10,1,1,0,1,1,0,1,10,3,10,1,0,1,1,1,1,2,1,0,10,0,1,10,1,1,2,2,2,3,10,1,1,1,1,1,2,2],[10,10,4,6,7,9,5,7,8,8,8,10,10,6,8,9,6,8,8,8,0,0,10,10,8,9,10,10,8,10,10,0,10,10,10,10,10,10,10,0,10,0,6,10,10,10,10,10,0,10,1,0,6,10,10,1,1,0,1,1,10,0,6,9,1,1,0,0,0,0,1,0,5,10,1,0,0,1,1,1,10,0,5,9,0,1,0,1,1,2,1,0,6,9,1,1,0,1,1,2],[0,10,3,5,7,9,5,7,8,8,8,9,10,5,8,9,10,7,8,8,9,0,10,6,8,9,10,8,8,10,0,0,5,7,10,10,10,10,1,10,10,0,10,10,10,10,10,10,10,0,10,0,5,8,10,10,10,10,0,1,1,0,5,8,10,1,1,0,1,0,1,0,5,8,10,1,0,0,1,1,10,0,5,1,10,0,1,0,1,1,1,0,5,8,10,1,1,1,1,2],[9,10,0,5,7,9,5,7,5,8,8,9,10,5,7,9,5,7,8,8,9,0,0,0,0,10,0,0,8,10,10,0,5,7,8,10,10,10,10,1,0,0,5,7,8,10,1,10,1,10,10,0,5,8,10,10,10,10,10,0,10,0,5,8,10,10,10,10,0,1,1,0,5,7,10,10,1,0,0,1,1,0,5,7,1,10,0,0,1,1,1,0,5,8,1,10,1,0,1,2],[9,10,3,5,6,8,5,7,7,7,8,8,0,5,7,8,10,7,7,8,8,0,10,5,7,8,10,7,7,0,10,0,0,7,7,9,10,10,10,10,8,0,5,7,8,8,10,10,10,10,0,0,5,7,9,5,10,1,1,10,10,0,5,8,10,10,10,10,10,0,10,0,5,7,10,10,10,10,0,0,10,0,5,7,10,1,10,0,0,1,1,0,5,7,0,1,10,1,1,1],[9,10,0,0,0,4,4,7,7,5,7,8,0,4,7,8,5,10,7,7,8,0,4,0,5,7,7,10,7,8,0,0,4,0,0,0,0,10,10,10,10,0,0,7,8,7,7,10,9,10,10,0,4,7,9,5,5,10,1,1,0,0,4,7,9,5,5,10,1,10,10,0,5,7,10,10,10,10,10,0,10,0,5,7,9,10,10,10,0,1,10,0,5,7,1,0,1,10,0,1],[0,10,0,4,0,4,4,6,4,5,7,8,0,4,0,0,5,6,7,7,8,0,10,4,5,7,6,0,10,1,9,0,4,5,4,4,4,4,10,0,10,2,4,0,8,9,7,7,10,7,10,2,0,0,2,4,4,5,10,10,10,0,4,6,9,5,4,5,10,1,0,2,4,7,9,5,5,5,10,10,10,0,4,7,9,10,10,10,10,0,10,2,4,7,9,10,0,1,10,1],[4,10,0,0,0,0,4,4,4,5,7,7,0,0,0,0,0,5,0,9,8,0,0,0,0,0,0,0,0,10,8,0,0,0,0,4,4,4,4,10,0,0,4,6,0,0,0,0,9,10,9,0,4,0,0,2,4,4,4,10,10,0,0,0,2,4,4,4,4,10,10,0,4,6,9,4,4,5,7,10,0,0,4,6,9,5,7,7,10,10,10,0,4,7,9,10,10,10,10,0],[8,10,0,0,5,3,4,6,4,7,7,9,0,4,0,0,4,0,0,0,0,9,3,0,4,4,4,0,4,4,0,1,4,0,0,0,0,4,4,4,7,1,4,6,1,4,4,4,0,0,0,1,4,6,0,0,0,4,4,4,4,1,4,0,0,4,4,4,4,4,2,1,0,6,8,4,4,4,6,2,2,0,4,6,8,10,7,7,4,10,0,1,4,6,9,10,1,1,0,1],[8,10,0,0,0,7,3,6,6,4,6,7,9,10,6,7,9,6,6,6,8,9,10,4,6,6,6,6,4,4,6,0,3,5,6,4,6,0,0,0,3,0,3,0,1,3,4,3,4,4,10,0,3,6,1,0,0,0,3,4,1,0,3,6,0,4,4,4,4,4,1,0,3,0,0,4,4,4,6,2,2,0,0,6,8,10,6,7,2,2,2,0,4,6,9,10,10,10,10,0],[8,9,0,4,5,7,3,5,6,6,6,8,9,0,6,6,4,6,6,7,8,9,10,10,6,8,9,10,6,8,0,10,3,5,6,7,6,6,3,0,0,10,3,0,3,3,3,3,3,3,0,1,3,6,3,3,3,3,3,0,1,1,3,5,8,0,3,3,3,4,1,1,3,6,0,4,4,4,6,2,2,1,3,0,8,10,6,7,2,2,2,1,3,6,8,10,2,2,2,2],[0,9,1,3,0,7,9,5,6,6,0,8,9,10,5,6,3,5,6,0,0,9,0,3,5,6,6,6,6,9,9,10,0,10,10,8,9,10,9,3,0,10,0,5,0,0,3,3,3,3,0,10,0,5,7,3,3,3,3,3,10,1,0,5,7,3,0,3,3,4,1,1,0,5,8,0,3,4,6,1,1,1,0,5,0,10,6,6,1,4,1,1,0,6,8,10,2,2,2,2],[0,9,1,0,5,7,9,5,5,6,0,6,9,0,0,0,0,5,0,6,0,8,0,10,0,6,0,0,0,0,0,1,0,5,5,5,5,5,5,10,10,1,3,10,10,9,10,10,5,3,0,1,3,5,7,3,3,3,0,3,3,1,3,5,7,3,3,3,3,0,1,1,0,5,7,3,0,3,6,0,1,1,3,5,7,0,6,6,1,1,1,1,3,5,8,10,2,2,2,2],[0,9,10,3,0,7,9,5,5,6,0,6,9,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,6,10,0,4,5,5,5,5,5,3,0,10,0,5,6,3,5,5,5,10,10,10,0,5,8,10,10,5,5,3,0,10,0,5,7,10,3,3,3,3,10,10,0,5,7,3,3,3,5,0,1,10,0,5,7,10,5,0,1,1,1,10,0,5,7,10,2,2,2,2],[0,8,10,0,4,0,9,5,5,5,0,6,8,0,5,0,0,0,0,0,0,8,9,0,0,5,0,0,0,0,8,9,0,10,5,0,0,0,0,0,2,0,0,5,6,2,5,2,2,2,0,1,0,5,7,2,2,5,5,10,10,10,0,5,7,10,10,3,2,3,5,1,0,5,7,3,3,3,5,0,1,10,0,5,7,9,5,6,1,1,1,1,0,5,0,10,1,1,1,1],[0,8,10,0,4,6,0,4,5,5,0,5,8,0,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,4,6,2,2,0,2,2,2,10,0,4,7,2,2,2,0,2,0,10,0,4,7,2,2,2,2,10,10,10,0,5,7,9,3,3,5,10,10,10,0,5,7,9,5,6,0,3,1,10,0,5,7,0,1,1,1,1],[0,8,10,2,4,0,8,2,4,5,0,5,8,0,4,0,0,0,0,0,7,7,9,0,0,0,0,0,0,0,0,8,0,4,0,5,5,7,5,0,8,10,0,0,0,7,0,0,0,0,2,10,0,4,6,2,2,2,4,2,2,0,0,4,6,0,0,2,2,2,0,10,0,4,6,2,2,2,5,10,10,10,0,5,7,9,5,5,10,0,10,1,0,4,7,9,0,1,1,1],[1,0,10,0,4,0,0,4,2,5,0,0,8,0,0,0,0,0,0,0,0,7,9,0,0,5,0,0,0,0,0,10,0,0,0,0,4,4,4,4,7,10,1,4,0,0,0,0,0,0,4,10,0,0,0,8,2,0,4,2,2,10,1,4,6,2,0,0,0,2,2,10,0,4,6,2,2,2,4,2,0,10,1,4,6,9,5,5,2,10,10,10,1,4,6,9,1,0,1,1],[0,0,8,0,4,0,0,4,4,4,0,7,7,0,4,0,0,0,0,0,6,7,9,0,0,0,0,0,0,0,0,0,10,3,0,0,0,0,0,1,0,0,10,4,1,1,4,1,4,0,1,1,0,4,0,0,0,0,0,0,1,1,0,0,0,0,4,1,0,2,2,2,0,4,6,2,2,2,4,2,2,0,0,4,6,8,10,5,2,2,0,0,0,4,6,9,10,1,0,1],[0,7,8,0,0,0,0,0,1,4,0,0,7,0,0,4,0,0,0,0,6,7,9,0,0,4,7,8,4,6,6,7,9,10,4,6,6,6,0,0,4,0,1,3,5,1,4,1,6,1,4,10,1,3,6,0,0,0,0,0,1,1,1,3,0,8,10,1,1,2,2,2,1,0,0,8,0,2,4,2,2,2,1,4,6,8,10,4,2,2,10,0,1,4,6,9,10,10,10,0],[6,0,7,0,0,5,8,9,10,9,6,0,6,9,0,6,6,0,4,0,6,6,8,9,4,6,6,8,9,6,6,8,9,10,10,6,7,7,9,7,10,6,0,3,5,6,6,6,6,1,1,1,0,3,5,1,1,1,3,0,10,10,0,3,5,0,0,10,1,1,1,1,0,3,6,0,1,1,4,4,4,0,0,0,0,8,10,4,1,2,0,2,0,3,6,8,10,2,2,2],[0,7,7,0,0,5,7,9,3,9,6,6,6,9,10,5,6,8,4,0,6,6,8,9,3,5,6,8,9,10,6,8,9,10,10,6,7,9,9,9,10,9,10,3,10,6,8,9,9,9,9,9,10,3,5,7,1,9,3,1,1,10,10,3,5,1,0,0,0,0,1,1,1,3,5,0,0,1,3,1,1,1,1,3,0,8,10,0,1,2,4,0,1,3,6,8,10,2,2,2],[0,7,7,1,0,5,7,9,3,9,0,6,6,9,3,5,6,8,3,6,0,6,8,9,3,5,6,8,0,6,6,0,9,0,3,5,6,6,6,10,10,10,1,10,10,10,8,10,10,10,0,10,1,0,5,7,9,9,10,10,1,0,1,0,5,7,3,1,3,0,10,1,1,0,5,1,0,3,3,1,1,1,1,3,5,0,10,0,1,1,1,1,1,3,5,8,10,2,2,2],[0,0,7,1,0,4,7,9,10,8,0,0,0,8,0,5,6,0,0,0,0,6,8,9,3,5,6,8,8,0,0,6,8,0,10,5,6,6,6,6,0,0,10,0,4,5,3,5,5,10,10,10,10,0,5,10,9,10,10,10,10,10,10,0,5,7,10,10,10,1,3,10,10,0,5,7,1,0,0,3,3,1,10,0,5,7,0,10,6,1,1,1,10,0,5,7,10,2,2,2],[0,0,6,10,3,0,7,9,10,8,0,0,0,8,0,0,5,0,0,0,0,0,8,9,0,0,0,7,0,9,0,7,8,0,10,5,5,0,8,0,0,0,9,0,4,5,5,5,5,5,0,0,10,0,5,6,2,5,2,10,10,10,1,2,5,10,10,10,10,10,0,0,10,2,5,7,10,3,3,0,3,1,1,2,5,7,9,10,0,1,1,1,1,2,0,7,10,1,1,1],[10,0,0,10,0,4,0,9,9,8,0,0,0,8,0,0,5,0,0,0,0,0,7,8,0,0,0,0,0,9,0,0,8,9,0,0,0,0,0,0,0,7,10,0,4,5,5,8,5,8,2,0,10,0,4,6,2,2,2,2,0,0,10,0,4,7,2,2,2,10,10,10,10,0,4,7,10,10,10,3,0,10,10,0,4,7,9,3,10,0,3,1,10,0,5,0,9,1,1,1],[1,0,0,10,0,4,6,0,9,8,0,0,0,8,0,4,5,0,0,0,0,5,7,8,0,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,7,8,0,10,10,7,0,0,0,0,2,0,0,4,6,2,2,2,2,2,0,0,0,4,0,2,2,2,2,0,0,10,0,4,6,2,2,2,10,10,10,10,0,4,7,9,10,5,0,3,10,1,0,4,7,0,1,1,1],[0,0,0,10,0,0,6,8,0,7,0,0,0,7,0,0,5,0,0,0,0,0,7,9,0,0,5,7,0,8,0,5,7,8,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,8,10,0,0,6,7,8,0,2,2,2,10,0,4,6,0,0,0,2,2,0,10,0,4,6,2,2,2,2,0,0,10,0,4,6,9,2,5,10,10,10,10,0,4,6,9,0,1,1],[0,10,6,10,10,0,6,8,9,9,0,0,0,7,0,0,4,0,0,0,0,0,7,7,0,0,0,0,0,0,0,5,7,9,0,0,0,0,0,0,0,0,0,10,3,4,4,7,4,0,1,0,1,10,0,0,0,0,0,0,1,1,1,1,4,6,8,1,0,2,2,2,0,1,4,6,8,2,2,2,2,0,0,2,4,6,8,2,2,2,0,1,2,2,4,6,9,10,0,1],[0,0,0,10,0,0,1,0,1,2,0,0,0,6,0,0,0,6,0,0,0,0,6,7,0,0,4,6,0,8,0,6,7,9,9,4,4,7,0,7,9,7,0,10,3,0,0,0,4,1,7,1,7,0,3,0,0,0,0,0,1,1,1,0,0,6,1,1,1,2,1,1,2,0,3,6,0,10,2,2,2,2,0,0,3,6,8,2,2,2,2,0,2,0,4,6,9,10,10,0],[10,0,5,10,0,3,5,1,1,7,4,0,0,6,1,0,0,0,0,0,0,0,6,7,0,0,0,6,0,8,0,6,7,9,9,10,4,7,7,7,9,7,7,10,9,10,6,7,6,7,7,8,1,1,3,5,1,8,9,0,1,10,1,1,3,0,8,9,10,1,1,1,1,1,0,6,1,0,1,2,2,0,2,1,3,6,0,2,4,2,2,2,0,1,3,6,8,10,2,2],[0,0,0,10,0,0,5,7,1,6,9,4,4,6,9,10,4,6,8,9,4,0,6,6,9,10,4,6,6,0,0,6,6,8,9,10,4,6,7,7,9,9,7,10,9,10,6,7,6,9,9,9,10,0,3,5,6,8,9,9,1,1,10,0,3,5,0,0,0,0,1,1,0,0,3,0,0,1,0,1,1,1,0,0,3,5,1,1,1,2,2,0,2,0,3,6,8,10,2,2],[0,9,5,0,0,0,5,7,8,6,0,5,6,6,8,10,3,6,8,9,9,10,6,6,9,10,0,6,6,8,9,6,6,8,9,10,5,6,6,8,8,9,10,9,9,10,6,7,9,9,9,9,10,1,3,10,6,8,9,10,9,9,9,1,3,5,7,1,9,0,1,10,10,1,3,5,8,10,1,1,1,1,1,1,3,0,0,1,1,1,1,2,0,1,3,5,8,10,2,2],[0,0,0,0,1,0,5,7,8,8,0,3,3,0,8,9,0,6,8,9,0,10,6,6,9,10,3,6,6,8,0,10,6,8,9,10,5,6,6,6,8,6,6,10,0,10,5,7,6,9,9,10,10,10,10,10,10,8,9,10,10,10,10,10,0,5,7,8,9,10,10,9,10,10,0,5,7,0,0,0,1,1,1,10,0,5,0,1,3,1,1,2,1,10,0,5,7,10,2,2],[8,0,10,0,10,0,0,7,8,8,0,0,0,0,10,0,0,5,8,0,0,0,5,6,8,10,3,5,6,7,0,0,6,8,8,10,5,6,6,6,0,8,6,8,0,10,5,7,5,8,0,0,0,10,0,4,5,7,8,10,10,10,10,10,2,10,10,10,9,10,10,10,10,1,2,5,7,9,9,0,3,1,1,1,0,5,7,0,0,1,1,1,1,1,2,5,7,10,1,1],[1,8,0,10,10,2,0,7,7,8,0,0,0,0,10,0,0,5,8,9,0,0,5,5,8,0,0,5,5,0,0,0,5,7,8,10,5,5,5,6,8,0,6,10,8,10,5,6,5,8,8,0,0,10,0,4,5,7,8,8,0,0,0,10,0,4,6,2,2,10,10,10,10,10,0,5,7,10,10,10,10,10,10,10,0,4,7,9,0,1,1,1,1,10,0,0,7,9,1,1],[0,0,0,10,10,0,4,0,7,8,0,0,0,0,10,0,0,5,7,0,0,0,0,5,8,0,0,5,5,7,0,0,0,7,8,10,0,5,0,7,0,0,10,8,8,10,5,6,0,7,0,0,0,10,0,10,5,7,8,8,8,0,0,10,2,4,6,2,2,9,0,0,10,10,2,4,6,8,8,10,10,10,10,1,2,4,7,10,10,0,10,1,10,10,2,4,0,9,1,1],[0,10,0,0,10,0,4,4,0,7,0,0,0,0,10,0,0,0,7,0,0,0,5,0,10,0,0,0,5,7,0,0,0,7,8,0,0,5,0,0,7,0,0,10,0,0,0,0,0,0,7,0,0,10,0,3,5,6,7,8,0,8,0,10,0,4,0,0,2,2,0,0,0,10,0,4,6,8,2,10,0,0,2,10,0,4,6,9,2,10,10,10,10,10,0,4,6,0,1,1],[0,0,10,9,8,0,0,6,6,7,0,0,0,0,5,0,0,0,7,0,0,0,0,5,7,0,0,5,5,0,0,0,5,7,7,0,0,0,0,0,0,0,5,7,10,10,0,6,0,0,0,0,0,0,10,10,0,0,0,0,0,0,7,0,10,4,6,4,0,2,2,2,0,10,0,4,6,2,2,2,0,0,0,10,0,4,6,8,2,2,0,0,1,0,0,4,6,9,0,1],[0,0,1,0,7,0,0,4,0,1,0,0,0,0,6,0,0,0,0,7,0,0,4,4,7,0,0,0,7,0,0,0,5,6,7,9,0,4,4,7,7,7,9,7,10,0,0,0,0,0,7,7,8,0,10,0,0,0,0,0,7,1,1,1,10,3,6,1,1,2,2,0,9,0,1,3,6,8,7,2,2,0,0,10,1,3,6,8,2,2,2,0,10,10,1,4,6,9,10,0],[9,0,0,9,7,10,0,5,0,4,1,0,0,0,0,1,0,0,0,0,0,0,0,4,7,0,0,0,0,6,0,0,4,6,7,0,0,0,4,7,0,7,9,7,10,9,4,5,4,7,7,7,8,0,10,3,4,6,7,0,7,7,7,1,0,0,5,7,7,0,1,1,1,1,0,3,5,7,1,2,2,0,2,0,0,3,5,8,2,2,2,2,0,0,0,3,6,8,10,2],[9,0,0,9,7,0,0,0,6,6,9,1,6,4,4,8,1,0,6,0,9,0,0,0,6,1,0,0,0,0,0,0,0,6,6,0,0,0,0,6,0,7,9,9,7,9,10,5,7,7,7,7,9,9,10,9,10,6,7,7,7,7,8,7,1,3,0,0,0,0,1,1,0,1,1,0,0,7,0,1,1,1,1,1,1,3,5,8,1,2,2,0,10,0,1,3,5,8,10,2],[0,10,9,0,7,10,3,5,3,6,9,6,1,4,4,8,10,3,6,8,9,8,0,0,6,10,10,0,0,6,6,0,4,6,6,9,10,5,6,0,0,0,9,9,10,9,10,5,6,6,6,7,9,9,10,9,10,5,6,8,7,8,8,9,0,3,5,6,7,0,1,1,9,9,0,3,0,7,7,1,1,1,1,1,0,0,5,7,1,1,1,1,0,1,0,3,5,8,10,2],[0,0,8,8,0,0,0,5,3,6,0,8,1,3,0,7,10,3,3,7,8,8,9,6,6,10,10,3,3,6,6,9,9,6,6,9,10,5,6,6,6,8,8,6,6,9,10,5,6,6,6,8,8,9,10,10,10,5,7,8,9,8,9,9,10,2,10,6,7,8,9,9,8,10,10,2,5,0,0,0,1,1,1,1,10,2,0,7,1,1,1,1,4,0,10,3,5,7,10,2],[1,0,8,0,6,1,0,5,5,8,8,8,0,0,0,7,10,0,3,7,8,8,3,8,5,10,10,3,3,6,6,8,9,5,6,8,10,5,3,6,6,8,8,8,6,9,10,5,6,6,6,6,8,9,10,0,10,5,6,8,9,9,9,10,10,10,10,10,7,9,9,10,10,10,1,0,5,7,7,0,9,1,10,0,1,0,4,0,0,1,1,1,1,1,1,0,5,7,10,1],[10,0,0,8,0,10,0,4,0,7,8,0,0,0,0,10,0,0,0,7,8,0,8,3,0,10,10,3,3,5,6,8,3,5,5,8,10,3,5,6,6,0,8,8,6,8,10,4,6,6,0,6,8,8,10,0,10,5,6,7,0,0,7,8,10,0,4,5,6,9,9,10,10,10,10,0,5,10,10,9,9,10,10,10,10,0,4,7,0,0,1,1,1,1,10,0,4,7,9,1],[10,10,0,8,0,10,10,0,5,7,0,0,0,0,0,10,0,0,0,7,8,0,0,0,0,10,0,0,0,5,7,0,0,5,5,8,10,4,5,5,5,0,0,8,6,8,10,4,5,5,0,0,8,8,9,8,10,4,6,7,0,0,0,8,9,0,4,5,6,7,0,0,0,8,10,2,4,6,5,9,10,10,10,10,10,2,4,7,10,0,10,10,3,10,10,1,0,7,9,1],[10,10,10,0,1,10,10,4,0,2,0,0,0,0,0,10,0,0,0,0,8,0,0,7,0,10,0,0,0,0,5,0,0,5,0,8,0,0,0,5,5,0,0,5,5,8,10,4,5,5,0,0,0,8,9,0,10,4,5,7,0,0,0,0,10,0,4,0,5,7,0,0,0,0,10,0,4,6,5,8,0,0,0,3,10,0,4,6,8,10,10,10,10,10,10,0,4,0,9,1],[0,0,10,0,10,9,0,4,4,7,0,0,0,0,0,5,0,0,0,6,7,0,0,0,5,6,0,0,0,7,5,0,0,0,5,7,0,0,0,5,5,0,0,0,5,7,0,0,0,5,0,0,0,0,9,9,10,0,0,0,0,0,0,0,8,10,3,4,0,2,0,0,0,0,0,1,3,5,2,2,0,0,0,2,10,1,3,6,8,5,0,0,2,2,0,2,4,6,0,1],[0,10,0,0,5,9,0,0,0,2,0,1,0,0,0,4,0,0,0,0,0,7,0,0,0,6,0,0,0,7,0,7,0,4,5,7,0,0,0,5,0,7,7,7,5,7,0,0,0,0,0,0,7,7,8,9,0,0,0,5,0,0,0,0,0,10,3,4,1,5,2,0,7,0,10,0,3,5,5,2,2,0,0,0,0,0,3,6,8,2,2,0,10,10,10,0,4,6,9,0],[7,0,0,10,0,9,0,0,1,4,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,6,0,0,0,7,0,0,0,0,4,6,0,0,0,0,0,0,0,7,9,7,0,0,0,0,0,5,7,7,8,9,0,4,5,6,5,7,7,7,7,9,3,10,5,6,1,1,0,1,0,1,3,5,1,7,2,0,2,0,0,1,3,5,7,2,2,2,0,0,2,1,3,6,8,2],[7,9,0,10,10,8,0,0,1,6,6,1,1,1,4,4,1,1,1,0,4,0,0,0,0,6,1,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,4,7,9,3,0,4,0,6,7,7,8,9,9,3,4,6,0,6,7,7,0,9,0,0,0,0,7,7,0,7,7,0,3,5,0,7,1,1,0,1,0,0,3,5,7,2,0,0,2,0,0,0,3,5,8,2],[9,9,10,0,5,8,10,0,0,1,6,6,6,1,1,4,1,10,1,4,6,6,8,0,0,4,1,1,0,0,4,0,0,0,4,6,1,0,0,0,0,0,0,0,4,6,0,3,0,0,0,0,6,7,8,8,9,10,4,6,7,6,6,7,9,9,10,10,5,0,7,7,7,10,7,1,0,0,4,1,1,1,1,1,1,1,2,5,7,1,1,1,0,1,0,1,3,5,8,2],[0,9,0,10,0,7,0,0,0,1,1,6,6,1,1,3,8,10,1,5,3,6,8,6,3,0,10,10,1,0,4,6,8,0,4,6,10,10,0,0,4,0,6,6,8,6,10,10,4,4,4,0,6,6,8,8,9,10,4,6,0,6,6,7,8,9,10,10,5,6,7,9,10,10,10,0,2,0,0,0,1,1,10,0,10,0,2,5,7,1,1,1,10,0,10,0,2,5,7,2],[3,0,10,10,10,0,10,10,0,5,0,0,0,8,0,0,10,10,0,1,0,5,8,6,3,4,10,10,1,3,0,6,8,0,0,5,10,10,3,0,3,6,6,6,8,6,10,10,3,6,6,6,6,6,8,8,9,10,4,6,6,6,6,7,10,8,10,10,10,6,7,9,10,10,10,10,2,10,10,0,7,9,10,10,10,10,2,0,7,1,1,1,1,10,0,1,2,5,7,1],[0,8,0,10,10,7,1,10,0,5,0,8,0,0,0,0,10,0,0,0,0,5,8,10,3,5,10,10,10,3,0,6,10,6,3,5,10,10,3,3,0,5,6,6,8,6,10,10,3,6,0,6,6,6,8,6,9,10,3,6,6,6,6,6,8,10,0,10,4,6,7,8,10,10,10,10,10,10,10,6,7,9,10,10,10,10,0,4,0,0,10,1,10,10,1,10,0,4,7,1],[0,8,0,1,0,0,10,0,10,5,0,0,10,0,0,0,10,0,0,0,0,5,10,10,0,0,10,10,0,5,0,7,0,5,3,5,10,10,10,3,0,5,6,6,8,5,10,10,3,5,0,0,6,6,7,6,10,10,3,6,0,6,6,6,10,8,0,10,4,6,0,0,0,6,10,10,0,4,3,7,10,9,10,10,10,10,0,10,10,0,10,9,10,10,10,1,0,4,7,1],[0,2,10,0,0,0,10,10,0,5,0,0,0,0,0,0,10,0,10,0,0,0,10,0,0,0,10,0,10,0,0,0,10,5,0,0,10,10,10,5,0,0,6,5,7,0,10,10,10,5,0,5,5,6,7,6,8,10,3,5,0,0,5,6,6,10,0,10,3,6,6,8,10,10,10,10,0,3,10,6,0,0,10,10,10,10,0,4,6,10,10,9,10,10,10,10,0,0,6,1],[0,0,10,10,10,10,10,10,4,5,0,0,0,0,0,0,5,0,0,4,0,0,10,0,0,7,5,0,10,0,0,0,10,0,10,5,7,10,0,0,0,0,5,0,7,5,10,10,10,5,0,0,5,5,7,7,10,10,0,5,0,0,0,5,10,7,10,10,3,5,0,0,0,10,0,0,10,3,10,5,0,0,10,10,10,10,10,3,10,10,0,0,0,10,0,2,1,4,0,1],[0,0,10,1,0,10,10,0,1,2,0,0,0,1,0,0,4,0,0,0,0,0,7,0,0,4,5,0,0,0,0,0,10,0,0,5,7,0,10,0,0,0,5,0,7,5,10,0,0,5,0,0,5,0,7,7,10,10,2,5,0,0,0,5,7,10,10,10,10,5,0,0,0,0,10,10,10,10,10,5,0,0,0,10,10,0,10,3,10,10,10,0,10,10,10,10,0,4,10,0],[10,0,10,10,0,10,10,0,1,4,4,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,4,0,0,0,0,0,10,0,0,4,7,0,0,4,0,0,5,0,0,5,7,0,0,0,0,0,0,0,7,7,10,10,10,5,0,0,0,5,10,10,10,10,10,5,0,7,0,10,0,0,10,3,10,5,0,7,10,0,10,10,10,3,10,10,10,8,0,0,10,0,10,3,6,10],[10,7,0,10,10,10,10,0,1,1,4,4,1,1,1,2,4,1,1,0,4,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,10,7,4,10,0,0,0,0,0,0,5,0,7,7,0,10,4,0,0,4,10,10,10,10,10,0,5,0,0,10,10,10,10,10,10,10,5,10,0,10,10,0,10,10,3,10,10,10,0,10,0,0,0,0,3,5,10],[10,7,10,0,10,10,10,0,10,1,1,6,9,9,1,1,3,1,10,1,1,6,0,0,1,0,4,1,10,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,4,4,0,0,0,4,0,0,4,6,6,7,0,10,0,5,0,4,10,9,10,10,10,10,4,5,7,10,10,10,10,10,10,10,10,10,7,10,10,10,0,10,2,10,10,10,7,0,10,0,0,10,3,5,2],[0,0,10,10,0,10,10,10,10,1,0,1,9,9,9,1,3,9,10,3,4,1,9,9,9,3,4,9,10,1,1,1,9,0,0,0,0,9,10,0,1,0,0,0,0,4,4,9,0,0,0,0,0,0,0,6,9,9,0,0,0,0,0,9,9,10,9,10,10,4,10,7,9,9,10,10,10,10,0,10,10,7,10,10,10,10,10,2,10,10,10,7,10,10,10,0,1,2,5,10],[10,6,1,10,10,0,10,10,10,3,0,6,0,9,9,9,0,9,9,3,0,3,9,9,9,9,3,9,9,3,0,5,3,9,9,0,0,9,10,10,10,6,0,9,6,4,4,9,10,0,10,6,0,0,6,6,9,9,10,4,0,4,0,4,9,9,9,9,10,10,10,6,9,9,9,9,0,9,10,0,10,7,9,9,9,10,0,2,10,10,10,7,10,10,0,10,0,2,10,1],[10,0,0,0,10,9,0,10,10,10,0,0,9,0,0,0,0,9,0,10,3,0,0,9,9,5,0,9,9,10,10,5,0,9,9,3,3,9,9,10,10,3,3,9,0,6,0,9,9,10,10,6,0,9,9,6,6,9,9,10,10,6,9,9,9,9,9,9,9,10,10,6,9,9,9,9,10,9,10,10,10,6,9,9,9,9,10,2,0,10,10,7,9,9,10,0,10,2,4,1],[0,0,9,9,0,9,9,1,10,10,0,0,0,0,0,0,0,9,0,0,0,0,3,9,9,0,0,9,9,10,0,0,3,9,9,3,3,9,9,10,0,0,3,9,9,0,3,9,9,10,0,6,3,9,9,6,9,9,9,10,10,6,9,9,9,9,9,9,9,10,10,6,9,9,9,9,9,0,9,10,10,6,9,9,9,9,9,0,9,10,9,6,9,9,9,9,0,0,4,1],[10,6,9,0,0,0,0,9,0,10,0,0,0,0,0,0,0,9,0,0,0,0,8,2,8,8,0,9,0,0,0,5,8,0,8,8,0,9,9,10,0,0,0,3,8,8,3,8,9,10,0,0,9,3,9,8,3,9,9,10,0,0,8,9,8,9,8,9,9,10,9,6,9,8,9,9,9,9,9,9,9,6,9,9,9,9,9,0,9,9,9,6,9,9,9,9,10,0,4,9],[9,0,9,9,9,0,9,8,9,2,0,0,0,0,0,0,0,4,0,0,0,0,8,0,8,0,8,5,0,0,0,0,8,8,8,8,0,7,0,10,0,0,0,8,8,8,8,6,9,10,0,0,0,8,8,8,8,8,9,10,0,0,0,8,8,9,8,8,9,9,0,0,8,8,8,8,8,9,9,9,9,0,8,8,8,9,9,9,9,9,0,0,8,9,9,9,9,9,0,9],[0,0,8,0,0,0,0,8,1,2,0,0,0,0,0,2,0,4,0,0,0,0,0,0,0,0,0,5,0,0,0,0,8,8,8,8,8,5,0,0,0,0,8,8,8,8,8,7,0,10,0,0,0,8,8,8,8,8,8,0,0,0,0,8,8,8,8,8,8,9,0,0,8,8,8,8,8,8,8,9,9,5,0,8,8,8,8,9,9,9,9,0,9,9,9,9,9,9,9,0],[9,0,8,8,8,8,8,8,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4,0,4,0,0,0,0,0,0,8,0,8,5,0,0,0,0,0,0,8,0,8,5,0,0,0,0,0,0,8,8,8,7,8,9,0,0,0,0,8,8,8,8,8,9,0,0,8,8,8,8,8,8,8,9,0,5,8,8,8,8,8,8,8,9,8,5,0,0,8,8,8,9,3,8],[8,4,0,8,8,8,8,8,1,1,1,1,1,1,1,1,1,4,1,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,2,0,5,0,0,2,4,0,0,7,0,7,5,8,0,2,5,0,0,8,7,7,7,8,9,8,0,0,0,8,8,8,8,8,9,0,0,8,8,8,8,8,8,8,8,0,0,8,8,8,8,8,8,8,8,8,0,8,0,8,8,8,9,3,8],[8,1,8,0,8,8,8,7,9,1,1,1,7,7,7,7,1,3,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4,0,5,0,0,0,0,0,7,0,0,7,7,8,0,0,0,0,0,0,8,7,7,8,8,8,5,7,7,7,7,8,8,8,8,0,5,7,7,8,8,8,8,8,8,8,5,0,8,0,8,8,8,3,8],[0,1,0,7,0,8,8,7,8,1,1,1,1,7,7,7,1,0,7,1,1,1,1,7,7,7,1,0,7,0,1,1,0,0,0,0,0,0,7,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,7,0,7,0,8,0,4,7,0,0,7,7,7,7,8,0,0,7,7,7,7,7,7,7,8,8,5,7,7,7,7,7,8,7,8,8,5,7,0,7,0,0,8,2,8],[8,0,1,0,8,0,8,7,8,9,8,3,7,7,7,7,7,0,7,8,1,1,1,1,7,6,1,3,7,8,1,3,7,0,0,0,0,0,7,8,1,1,0,0,7,0,0,0,7,8,1,0,0,0,0,0,0,6,7,0,0,0,0,0,0,0,7,7,0,8,0,4,7,7,7,7,7,7,7,8,8,4,7,7,7,7,7,7,7,8,7,4,7,7,0,7,0,8,2,7],[8,3,7,0,0,7,0,6,8,8,0,0,7,7,7,7,7,0,7,8,0,0,6,6,0,7,3,3,7,8,8,1,7,6,1,6,6,0,7,8,8,3,7,7,0,0,0,0,7,8,8,4,7,0,0,7,7,6,7,8,8,4,7,7,7,7,7,7,7,0,0,4,7,7,7,7,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,4,7,7,7,0,7,0,2,7],[0,4,7,7,0,0,7,0,8,8,0,0,0,0,0,0,0,0,7,0,0,0,6,6,0,6,6,0,7,8,0,0,6,6,3,6,6,3,7,8,8,3,6,7,0,7,0,0,7,8,7,3,7,7,0,7,6,6,7,8,7,4,7,7,6,7,6,6,7,7,7,4,7,6,7,6,7,6,7,7,7,4,7,7,7,7,7,7,7,7,7,4,7,7,7,7,7,7,1,7],[7,4,7,6,0,0,0,1,6,8,0,0,0,0,0,0,0,0,7,0,0,0,0,6,6,0,6,0,6,8,0,0,6,6,6,6,6,0,6,8,0,0,6,6,6,3,6,0,6,8,7,0,6,6,6,0,6,0,7,7,7,3,6,6,6,6,6,6,7,7,7,4,6,6,6,6,6,6,7,7,7,4,6,6,6,6,6,7,6,7,7,4,7,7,7,7,7,7,0,7],[7,0,6,6,7,0,7,6,6,7,0,0,0,0,0,0,6,0,5,0,0,0,0,6,6,6,0,0,5,0,0,0,0,6,6,6,6,5,5,7,0,0,6,6,6,6,6,6,6,7,0,0,6,6,6,6,6,6,6,7,0,0,6,6,6,6,6,6,6,7,7,0,6,6,6,6,6,6,6,7,7,3,6,6,6,6,6,6,6,7,0,0,6,6,6,6,6,6,7,6],[0,0,0,6,6,0,0,6,6,1,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,6,6,0,5,0,0,0,0,6,6,6,6,5,5,0,0,0,6,6,6,6,6,5,5,7,0,0,0,6,6,6,6,6,6,7,0,0,6,6,6,6,6,6,6,7,6,0,6,6,6,6,6,6,6,7,6,3,6,6,6,6,6,6,6,6,6,3,6,6,6,6,6,7,6,0],[6,0,6,6,6,6,0,6,6,1,1,0,0,1,0,0,0,0,4,1,1,0,0,0,0,0,0,5,4,0,2,0,0,0,0,5,6,0,5,0,2,0,0,6,5,6,5,5,5,7,2,0,0,0,6,6,6,5,5,7,6,0,0,6,5,6,5,5,5,6,6,0,6,5,6,6,6,5,6,6,0,3,6,6,6,6,6,6,6,6,0,3,5,6,6,6,6,6,6,6],[6,0,0,6,6,6,0,6,5,1,1,1,1,1,1,1,1,1,4,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,5,0,6,0,0,5,5,5,5,5,5,0,6,0,0,0,5,5,5,5,5,6,6,0,0,5,5,5,5,5,5,6,6,0,5,5,5,5,5,5,5,6,6,0,5,5,5,5,5,5,6,6,6,0,5,5,5,5,5,5,6,6],[6,3,5,0,6,6,6,5,5,1,1,1,1,1,1,1,5,5,0,1,1,1,1,4,4,5,0,0,4,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,5,0,6,2,5,5,5,5,5,5,5,6,6,2,5,5,5,5,5,5,5,6,6,0,5,5,5,5,5,5,5,6,6,0,5,5,5,5,5,5,5,5,5,0,0,5,5,5,5,5,6,5],[0,0,0,5,0,5,6,5,5,6,1,1,5,5,5,5,5,5,0,6,1,1,4,1,4,5,5,1,4,6,1,1,1,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,5,1,0,0,0,0,0,0,5,5,0,6,0,0,0,5,5,5,5,5,6,5,0,5,0,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,0,5,0,5,5,5,5,5,5],[5,0,1,5,5,0,5,5,5,6,6,0,5,5,5,5,5,5,0,6,6,1,4,5,4,5,5,4,3,6,5,1,4,4,1,4,0,0,4,6,5,1,4,4,0,0,0,0,0,5,5,0,4,1,0,0,0,0,0,5,1,0,1,0,0,0,0,4,4,5,5,0,5,4,0,4,5,4,5,5,5,0,5,5,5,5,5,5,5,5,5,0,5,5,0,5,5,5,5,5],[5,0,4,0,0,4,0,5,4,6,6,0,5,5,0,5,4,5,0,6,5,0,4,4,4,4,5,4,0,5,5,0,4,4,4,1,4,4,4,5,5,1,4,4,0,0,0,0,0,5,5,1,4,0,0,0,0,0,0,5,5,0,0,4,4,0,4,4,4,5,5,0,0,4,4,0,4,4,4,5,5,0,4,4,4,4,4,4,4,5,5,0,4,4,4,0,4,4,5,4],[5,0,4,4,0,4,1,0,4,5,5,0,0,0,0,0,0,4,0,5,5,0,4,4,4,0,4,4,0,5,5,0,4,4,4,4,4,4,3,5,5,0,4,4,4,4,0,0,4,5,5,1,4,4,4,4,0,4,4,5,5,1,4,4,4,4,0,0,4,5,5,0,4,4,4,4,4,4,4,5,4,0,4,4,4,4,4,4,4,4,4,0,4,4,4,4,0,4,4,4],[5,0,4,4,0,0,4,1,0,5,5,0,0,0,0,0,0,0,0,5,5,0,4,0,0,0,0,3,0,5,5,0,4,4,4,4,4,3,0,5,5,0,4,4,4,4,4,3,3,5,5,0,4,4,4,4,4,0,0,5,5,1,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,4,0,4,4,0,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4],[4,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,4,5,0,0,0,0,0,0,0,3,4,4,0,4,4,4,4,4,4,0,4,4,0,4,4,4,4,4,4,3,4,4,0,4,4,4,4,4,4,3,4,4,0,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,4,4,4,4,0,3,3,4,4,4,4,0,4],[0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,2,0,3,0,3,0,0,0,0,0,0,0,0,0,4,0,0,0,3,3,3,3,3,3,4,0,0,0,3,3,3,3,3,3,4,0,0,0,3,3,3,3,3,3,4,0,0,0,3,3,4,3,3,3,4,0,0,3,3,4,3,4,3,4,4,0,0,3,3,3,3,3,4,4,4,0,1,4,4,4,4,4,4,4,4],[0,1,3,3,3,3,4,3,3,3,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,3,0,3,0,1,3,0,0,0,0,0,0,3,0,1,3,0,3,3,3,3,3,3,0,1,3,0,3,3,3,3,3,3,0,1,3,3,3,3,3,3,3,3,0,1,3,3,3,3,3,3,3,3,0,1,3,3,3,3,3,3,3,3,0,1,3,3,3,3,3,3,3,3],[0,1,0,3,3,3,3,0,3,3,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,2,0,3,0,1,0,3,0,0,0,0,0,3,0,1,0,3,0,3,3,3,3,3,0,1,0,3,3,3,3,3,3,3,0,1,0,3,3,3,3,3,3,3,0,1,0,3,3,3,3,3,3,3,0,1,0,3,3,3,3,3,3,3],[0,1,0,0,3,3,3,3,3,3,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,2,0,3,0,1,0,0,2,0,3,2,0,3,0,1,0,0,3,2,3,3,2,3,0,1,0,0,3,2,3,3,3,3,0,1,0,0,3,3,3,3,3,3,0,1,0,0,2,2,3,3,3,3],[0,10,0,0,0,3,3,3,3,2,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,2,0,2,0,10,0,0,0,2,2,2,2,3,0,10,0,0,0,2,2,2,2,2,0,10,0,0,0,2,2,2,2,2,0,10,0,0,0,2,2,2,2,2],[0,10,0,0,0,0,2,2,3,2,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,2,0,10,0,0,0,0,2,2,2,2,0,10,0,0,0,0,2,2,2,2,0,10,0,0,0,0,2,2,2,2],[0,10,0,0,0,0,0,2,2,2,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,2,2,2,0,10,0,0,0,0,0,2,2,2,0,10,0,0,0,0,0,2,2,2],[0,10,0,0,0,0,0,0,2,2,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,1,2,0,10,0,0,0,0,0,0,1,2],[0,10,0,0,0,0,0,0,0,1,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]][score][opponent_score]
    # END PROBLEM 12


##########################
# Command Line Interface #
##########################

# NOTE: Functions in this section do not need to be changed. They use features
# of Python not yet covered in the course.


@main
def run(*args):
    """Read in the command-line argument and calls corresponding functions.

    This function uses Python syntax/techniques not yet covered in this course.
    """
    import argparse
    parser = argparse.ArgumentParser(description="Play Hog")
    parser.add_argument('--run_experiments', '-r', action='store_true',
                        help='Runs strategy experiments')

    args = parser.parse_args()

    if args.run_experiments:
        run_experiments()